const { Client, GatewayIntentBits, EmbedBuilder, PermissionFlagsBits, ActivityType } = require('discord.js');
const fetch = require('node-fetch');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const STORAGE_PATH = path.resolve(process.env.STORAGE_PATH || './status_messages.json');
const SERVER_STATUS_URL = process.env.SERVER_STATUS_URL || 'https://lizard.spacestation14.io/server/status';
const SERVER_ICON_URL = process.env.SERVER_ICON_URL || 'https://raw.githubusercontent.com/cryals/ss14-status-bot/refs/heads/main/ss14_logo.png';
const EMBED_COLOR = parseInt(process.env.EMBED_COLOR, 10) || 14745344;
const UPDATE_INTERVAL_MS = parseInt(process.env.UPDATE_INTERVAL_MS, 10) || 60000;

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ –ú–°–ö (UTC+3)
function formatTime(date) {
    const options = {
        hour: '2-digit',
        minute: '2-digit',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour12: false,
        timeZone: 'Europe/Moscow'
    };

    const formatted = new Intl.DateTimeFormat('ru-RU', options).format(date);
    const [datePart, timePart] = formatted.split(', ');

    return `${timePart} ${datePart}`;
}

// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—É–Ω–¥–∞
function calculateRoundTime(startTime) {
    if (!startTime) return "–í –ª–æ–±–±–∏";

    const start = new Date(startTime);
    const now = new Date();
    const diffMs = now - start;

    if (diffMs < 0) return "0 –º–∏–Ω";

    const diffMinutes = Math.floor(diffMs / 60000);
    const hours = Math.floor(diffMinutes / 60);
    const minutes = diffMinutes % 60;

    if (hours > 0) {
        return `${hours}—á ${minutes}–º–∏–Ω`;
    }
    return `${minutes}–º–∏–Ω`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function fetchServerStatus() {
    try {
        const response = await fetch(SERVER_STATUS_URL);
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ embed —Å–æ–æ–±—â–µ–Ω–∏—è
function createStatusEmbed(data) {
    if (!data) {
        return new EmbedBuilder()
            .setTitle('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
            .setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.')
            .setColor(0xFF0000)
            .setFooter({ text: `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatTime(new Date())}` });
    }
    const roundTime = calculateRoundTime(data.round_start_time);

    return new EmbedBuilder()
        .setDescription(`**–û–Ω–ª–∞–π–Ω:** ${data.players}\n**–ö–∞—Ä—Ç–∞:** ${data.map || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n**–†–∞—É–Ω–¥:** ${data.round_id}\n**–†–µ–∂–∏–º:** ${data.preset}\n**–í—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:** ${roundTime}`)
        .setColor(EMBED_COLOR)
        .setAuthor({
            name: data.name,
            iconURL: SERVER_ICON_URL.trim()
        })
        .setFooter({
            text: `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatTime(new Date())}`
        });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function loadStatusMessages() {
    try {
        const data = await fs.readFile(STORAGE_PATH, 'utf-8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log('–§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π');
            return [];
        }
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        return [];
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
async function saveStatusMessages(messages) {
    try {
        await fs.writeFile(STORAGE_PATH, JSON.stringify(messages, null, 2));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
async function updateStatusMessages() {
    const data = await fetchServerStatus();
    const embed = createStatusEmbed(data);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–Ω–ª–∞–π–Ω
    try {
        if (data && data.players !== undefined && data.soft_max_players !== undefined) {
            client.user.setPresence({
                activities: [{
                    name: `–û–Ω–ª–∞–π–Ω: ${data.players}/${data.soft_max_players}`,
                    type: ActivityType.Custom
                }],
                status: 'online'
            });
            console.log(`–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: –û–Ω–ª–∞–π–Ω: ${data.players}/${data.soft_max_players}`);
        } else {
            client.user.setPresence({
                activities: [{
                    name: '–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞',
                    type: ActivityType.Custom
                }],
                status: 'dnd'
            });
            console.log('–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error);
    }

    try {
        const messages = await loadStatusMessages();

        for (const msg of messages) {
            try {
                const channel = await client.channels.fetch(msg.channelId);
                const message = await channel.messages.fetch(msg.messageId);
                await message.edit({ embeds: [embed] });
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${msg.messageId}:`, error);
                // –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                const updatedMessages = messages.filter(m =>
                    m.messageId !== msg.messageId || m.channelId !== msg.channelId
                );
                await saveStatusMessages(updatedMessages);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ updateStatusMessages:', error);
    }
}

client.once('ready', async () => {
    console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}!`);

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    try {
        await client.application.commands.set([
            {
                name: 'ping',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞'
            },
            {
                name: 'status',
                description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞'
            },
            {
                name: 'send-status',
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞–Ω–∞–ª–µ',
                options: [
                    {
                        name: 'channel',
                        type: 7,
                        description: '–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞',
                        required: true,
                        channel_types: [0, 5]
                    }
                ]
            }
        ]);
        console.log('–°–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
    }

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await updateStatusMessages();
    setInterval(updateStatusMessages, UPDATE_INTERVAL_MS);
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    // –ö–æ–º–∞–Ω–¥–∞ ping
    if (interaction.commandName === 'ping') {
        await interaction.reply({ content: 'Pong! üèì', ephemeral: true });
        return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if (interaction.commandName === 'status') {
        await interaction.deferReply({ ephemeral: true });

        const data = await fetchServerStatus();
        const embed = createStatusEmbed(data);

        await interaction.editReply({
            embeds: [embed]
        });
    }

    // –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (interaction.commandName === 'send-status') {
        await interaction.deferReply({ ephemeral: true });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            return interaction.editReply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!');
        }

        const channel = interaction.options.getChannel('channel');

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
            const botPermissions = channel.permissionsFor(interaction.guild.members.me);
            if (!botPermissions.has(PermissionFlagsBits.ViewChannel)) {
                return interaction.editReply('‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É!');
            }
            if (!botPermissions.has(PermissionFlagsBits.SendMessages)) {
                return interaction.editReply('‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!');
            }
            if (!botPermissions.has(PermissionFlagsBits.EmbedLinks)) {
                return interaction.editReply('‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å embed-—Å–æ–æ–±—â–µ–Ω–∏—è!');
            }

            const data = await fetchServerStatus();
            const embed = createStatusEmbed(data);

            const sentMessage = await channel.send({ embeds: [embed] });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            const messages = await loadStatusMessages();
            messages.push({
                channelId: channel.id,
                messageId: sentMessage.id
            });
            await saveStatusMessages(messages);

            await interaction.editReply(`‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ ${channel}!`);
            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª ${channel.name} (ID: ${sentMessage.id})`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            await interaction.editReply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }
    }
});

client.login(process.env.DISCORD_TOKEN);